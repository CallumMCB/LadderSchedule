generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

model User {
id String @id @default(cuid())
email String @unique
name String?
password String // hashed (bcrypt)
phone String? // Contact phone number
resetToken String? // Password reset token
resetTokenExpiry DateTime? // Token expiry time
otpCode String? // One-time password code
otpExpiry DateTime? // OTP expiry time
notificationPreference String @default("email") // "email" or "sms"
receiveUpdates Boolean @default(true) // Receive updates about the tennis ladder
receiveMatchNotifications Boolean @default(true) // Receive match notifications and reminders  
receiveMarketing Boolean @default(false) // Receive occasional marketing/info emails
emailVerified Boolean @default(false) // Whether the email has been verified
emailVerificationToken String? // Token for email verification
emailVerificationExpiry DateTime? // Expiry time for email verification token

// Partner link (one-to-one). Unique helps avoid being linked to multiple partners.
partnerId String? @unique
partner User? @relation("PartnerLink", fields: [partnerId], references: [id])
partneredBy User? @relation("PartnerLink")

// Ladder assignment
ladderId String? // Which ladder this user/team belongs to
ladder Ladder? @relation(fields: [ladderId], references: [id])

availability Availability[]
setAvailabilityFor Availability[] @relation("SetByUser")
createdAt DateTime @default(now())
}

model Ladder {
id String @id @default(cuid())
name String // e.g., "Ladder 1", "Ladder A", etc.
number Int @unique // Ladder number for ordering
endDate DateTime // When this ladder season ends
isActive Boolean @default(true) // Whether this ladder is currently active
winnerBy String @default("matches") // "matches" or "games" - how winner is determined
matchFormat Json @default("{\"sets\":3,\"gamesPerSet\":6,\"winnerBy\":\"sets\"}") // Match format settings
users User[]
matches Match[]
createdAt DateTime @default(now())
}

model Availability {
id String @id @default(cuid())
userId String
startAt DateTime // 30-min slot start (stored as UTC)
weekStart DateTime // Monday 00:00 UTC for the week
availability String @default("available") // "available", "not_available", or "none"
setByUserId String? // ID of user who set this availability (null if set by self)
user User @relation(fields: [userId], references: [id])
setByUser User? @relation("SetByUser", fields: [setByUserId], references: [id])

@@unique([userId, startAt])
@@index([userId, weekStart])
}

model Match {
id String @id @default(cuid())
startAt DateTime // Match time (stored as UTC)
team1Id String // First team ID (sorted for consistency)
team2Id String // Second team ID
confirmed Boolean @default(false)
confirmedAt DateTime @default(now())
createdAt DateTime @default(now())
team1Score Int? // Score for team1
team2Score Int? // Score for team2
team1DetailedScore String? // Detailed set scores (e.g., "6,4,X")
team2DetailedScore String? // Detailed set scores (e.g., "3,6,X")
completed Boolean @default(false) // Whether the match has been played and scored

// Ladder assignment
ladderId String? // Which ladder this match belongs to
ladder Ladder? @relation(fields: [ladderId], references: [id])

@@unique([startAt, team1Id, team2Id])
@@index([startAt])
@@index([ladderId])
}

model WeatherCache {
id String @id @default(cuid())
date DateTime // Date for this forecast (midnight UTC)
temperature Int // Max temperature in Celsius
minTemperature Int? // Min temperature in Celsius
weatherType String // Weather description (e.g., "Sunny", "Light rain")
precipitationProbability Int? // Chance of rain (0-100)
windSpeed Int? // Wind speed in mph
windDirection String? // Wind direction (e.g., "SW")
uvIndex Int? // UV index (0-11+)
visibility String? // Visibility description
humidity Int? // Relative humidity percentage
updatedAt DateTime @default(now()) // When this record was last updated

@@unique([date])
@@index([date])
}

model HourlyWeatherCache {
id String @id @default(cuid())
datetime DateTime // Exact date and hour in British time
temperature Float // Screen temperature in Celsius
feelsLikeTemperature Float? // Feels like temperature in Celsius  
weatherType String // Weather description from weather code
precipitationProbability Int? // Chance of rain (0-100%)
precipitationRate Float? // Precipitation rate (mm/h)
windSpeed Float? // Wind speed in m/s
windDirection Int? // Wind direction in degrees (0-360)
windGust Float? // Wind gust speed in m/s
uvIndex Int? // UV index (0-11+)
visibility Int? // Visibility in metres
humidity Float? // Relative humidity percentage
pressure Float? // Mean sea level pressure in pascals
dewPoint Float? // Dew point temperature in Celsius
updatedAt DateTime @default(now()) // When this record was last updated

@@unique([datetime])
@@index([datetime])
@@index([updatedAt])
}

model ThreeHourlyWeatherCache {
id String @id @default(cuid())
datetime DateTime // Exact date and three-hour slot in British time  
temperature Float // Screen temperature in Celsius
feelsLikeTemperature Float? // Feels like temperature in Celsius  
weatherType String // Weather description from weather code
precipitationProbability Int? // Chance of rain (0-100%)
precipitationRate Float? // Precipitation rate (mm/h)
windSpeed Float? // Wind speed in m/s
windDirection Int? // Wind direction in degrees (0-360)
windGust Float? // Wind gust speed in m/s
uvIndex Int? // UV index (0-11+)
visibility Int? // Visibility in metres
humidity Float? // Relative humidity percentage
pressure Float? // Mean sea level pressure in pascals
dewPoint Float? // Dew point temperature in Celsius
updatedAt DateTime @default(now()) // When this record was last updated

@@unique([datetime])
@@index([datetime])
@@index([updatedAt])
}